// Copyright 2014 G&W. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package service

import (
	"encoding/json"
	"net/http"
	"zim/common"
	"zim/dao"
)

type pushSvr struct {
}

func NewPushSvr() *pushSvr {
	return &pushSvr{}
}

func (p *pushSvr) PushSvrHandle(w http.ResponseWriter, r *http.Request) (res string, code int) {
	//defer common.HandleError()
	token := r.FormValue("token")
	sd := dao.NewSendDao(token)
	if err := json.Unmarshal([]byte(r.FormValue("query")), sd); err == nil {
		if c, err := ConnectHub.getConnectSvr("c/" + token); err == nil {
			pd := dao.NewPushDao()
			pd.Assert(sd)
			pd.Tuid = pd.Tuid
			if message, err := json.Marshal(pd); err == nil {
				c.sendText(message)
			} else {
				common.LogSvr.Println("info:" + err.Error())
			}
		} else {
			common.LogSvr.Println("info:" + err.Error())
		}
	} else {
		common.LogSvr.Println("info:" + err.Error())
	}
	return
}
