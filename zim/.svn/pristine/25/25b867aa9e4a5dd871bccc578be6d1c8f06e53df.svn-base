package service

import (
	"encoding/json"
	//"fmt"
	"net/http"
	"zim/common"
	"zim/dao"
	"zim/sys"
)

type receiveSvr struct {
}

func NewReceiveSvr() *receiveSvr {
	return &receiveSvr{}
}

/**
 * 获取消息处理器
 * websocket
 */
func (r *receiveSvr) handle(req *dao.RequestDao) (err error) {
	//defer common.HandleError()
	if req.Tuid != "" {
		rd := dao.NewReceiveDao()
		rd.Get(req)
		if c, err := ConnectHub.getConnectSvr("u/" + req.Tuid); err == nil {
			if len(rd.Message) > 0 {
				if message, err := json.Marshal(rd); err == nil {
					c.sendText(message)
				}
			} else {
				c.sendText([]byte{})
			}
		} else {
			common.LogSvr.Fatal("fatal:" + err.Error())
		}
	} else {
		common.LogSvr.Fatal("fatal: "+sys.LangConf.Get("4000").MustString(), err)
		return
	}
	return
}

/**
 * 获取消息处理器
 * HTTP
 */
func (rs *receiveSvr) ReceiveSvrHandle(w http.ResponseWriter, r *http.Request) (message []byte, code int) {
	defer common.HandleError()
	msg := r.FormValue("query")
	req := dao.NewRequestDao()
	if err := json.Unmarshal([]byte(msg), req); err != nil {
		code = 4000
		common.LogSvr.Fatal("fatal: "+sys.LangConf.Get("4000").MustString(), string(msg), err)
		return
	}
	rd := dao.NewReceiveDao()
	if err := rd.Get(req); err == nil {
		message, _ = json.Marshal(rd)
	}
	return
}
