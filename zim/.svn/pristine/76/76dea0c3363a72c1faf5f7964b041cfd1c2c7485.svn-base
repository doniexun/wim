package service

import (
	"encoding/json"
	//"fmt"
	"math/rand"
	"net/http"
	"net/rpc"
	"strconv"
	"sync"
	"time"
	"zim/common"
	"zim/dao"
	"zim/sys"
)

type loginSvr struct {
	lock      *sync.RWMutex
	online    int
	tToServer map[string]connection //token conn
	uToToken  map[string]string     //uid token
}

var LoginSvr *loginSvr

func NewLoginSvr() *loginSvr {
	return &loginSvr{
		lock:      new(sync.RWMutex),
		tToServer: make(map[string]connection),
		uToToken:  make(map[string]string),
	}
}

func (l *loginSvr) LoginSvrHandle(w http.ResponseWriter, r *http.Request) (res string, code int) {
	l.lock.RLock()
	defer l.lock.RUnlock()
	if l.online >= sys.BaseConf.Get("online").MustInt() {
		code = 2007
		return
	}
	switch r.FormValue("act") {
	case "login":
		appid := r.FormValue("appid")
		username := r.FormValue("username")
		password := r.FormValue("password")
		if appid == "" || username == "" || password == "" {
			code = 2003
		}
		//rand token start
		t, i := common.RandomStr(32), 0
		for _, ok := l.tToServer[t]; ok; i++ {
			t = common.RandomStr(32)
			if i > 50 {
				code = 2006
				break
			}
		}
		//end
		userDao := dao.NewUserDao(t)
		if userDao.Login(username, password, appid); userDao.Uid == "" {
			code = 2005
			return
		}
		if token, ok := l.uToToken[userDao.Uid]; ok && r.FormValue("force") == "" {
			code = 2001
			return
		} else if ok && r.FormValue("force") == "1" {
			//push tip
			pd := dao.NewPushDao()
			pd.Cmd = "force"
			pd.Stime = time.Now().Unix()
			p := NewPushSvr()
			data, _ := json.Marshal(pd)
			p.PushTip("c/"+token, data)
			//end
			delete(l.tToServer, token)
			delete(l.uToToken, userDao.Uid)
			l.online--
		}
		//rand server start
		seed := rand.New(rand.NewSource(time.Now().UnixNano()))
		nss, _ := sys.BaseConf.Get("ns").Map()
		ns, _ := sys.BaseConf.Get("ns").Get(strconv.Itoa(seed.Intn(len(nss)))).Map()
		//end
		if code == 0 {
			c := connection{}
			c.CliSck = r.RemoteAddr
			c.SvrIp = ns["ip"].(string)
			c.SvrPort = ns["port"].(string)
			c.User = userDao
			c.Device = common.GetDevice(r)
			c.Token = t

			l.tToServer[t] = c
			l.uToToken[userDao.Uid] = t
			l.online = len(l.tToServer)

			info, _ := json.Marshal(c)
			res = string(info)
		}
	default:
		code = 4012
	}
	return
}

func (l *loginSvr) CheckLogin(query string) (res string, islogin bool) {
	ls, _ := sys.BaseConf.Get("ls").Map()
	for i := 0; i < len(ls); i++ {
		dd, _ := sys.BaseConf.Get("ls").Get(strconv.Itoa(i)).Map()
		client, err := rpc.DialHTTP("tcp", dd["ip"].(string)+":"+dd["port"].(string))
		if err != nil {
			common.LogSvr.Println("info:" + sys.LangConf.Get("5007").MustString() + err.Error())
			continue
		}
		var reply []byte
		err = client.Call("RpcSvr.CheckLogin", query, &reply)
		if err != nil {
			continue
		} else {
			res = string(reply)
			islogin = true
			break
		}
	}
	return
}
