// Copyright 2014 G&W. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sys

import (
	"fmt"
	"github.com/bradfitz/gomemcache/memcache"
	"sync"
)

type memcachePool struct {
	lock      *sync.RWMutex
	memcaches map[string]*memcache.Client
}

var MemcachePool = memcachePool{
	memcaches: make(map[string]*memcache.Client),
	lock:      new(sync.RWMutex),
}

func (m *memcachePool) GetMemcache(memcahceName string) *memcache.Client {
	c := m.memcaches[memcahceName]
	if c == nil {
		m.lock.RLock()
		defer m.lock.RUnlock()
		config := Gconfig.Get("memcache").Get(memcahceName)
		connName := fmt.Sprintf("%s:%d", config.Get("host").MustString(), config.Get("port").MustInt())
		c = memcache.New(connName)
		m.memcaches[memcahceName] = c
	}
	return c
}
