// Copyright 2014 G&W. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package lib

import (
	"errors"
	"gaw/common"
	"gaw/dao"
	"github.com/bitly/go-simplejson"
	"strconv"
	"time"
)

const (
	pingPeriod = 10 //10s心跳
)

type sendSrv struct {
	message chan *model.MessageModel //发送消息主体
}

func NewMessageSrv() *messageSrv {
	return &messageSrv{
		message: make(chan *model.MessageModel, 10000), //消息中间件中最多10000条数据同时处理
	}
}

/**
 * 解析请求
 */
func (m *messageSrv) parse(c common.Isocket, msg []byte) error {
	defer common.HandleError()

	r := model.NewRequestModel()
	if err := json.Unmarshal(msg, requestModel); err != nil {
		log.Println(sys.Gcode.Get("4000").MustString(), string(msg))
		return err
	}
	if userInfo, err := socketProtocoler.GetUser(); err == nil {
		requestModel.FromUid = "u/" + userInfo.Uid
	}
	if connId, err := socketProtocoler.GetConnId(); err == nil {
		requestModel.FromConnId = connId
	}
	requestModel.Stime = time.Now().Unix() //系统时间
	if requestModel.Expired <= 0 {
		requestModel.Expired = 86400
	}
	if id, err := gawMessager.saveRequest(*requestModel); err == nil {
		requestModel.Id = id
		gawMessager.requestHandle(requestModel)
	}
	return nil
}

/**
 * 消息处理器
 * 包含：单聊消息、群聊消息、返回消息（单设备在线推送）
 * 单消息多设备拆分、群消息多用户拆分
 */
func (gawMessager *GawMessage) requestHandle(requestModel *model.RequestModel) {
	var num int
	messageModel := model.NewMessageModel()
	messageModel.Times, messageModel.Received = 0, false
	messageModel.Cmd, messageModel.Sequence, messageModel.Rid, messageModel.Message, messageModel.Option, messageModel.Stime, messageModel.Expired = requestModel.Cmd, requestModel.Sequence, requestModel.Id, requestModel.Message, requestModel.Option, requestModel.Stime, requestModel.Expired
	switch messageModel.Cmd {
	case "received":
		if id, ok := requestModel.Message["id"]; ok {
			if intid, err := strconv.Atoi(id); err == nil {
				messageModel.Id = int64(intid)
				gawMessager.messageHandle(*messageModel)
			}
		}
		return
	case "login":
		messageModel.To, messageModel.ToConnId, messageModel.FromConnId = requestModel.FromConnId, requestModel.FromConnId, requestModel.FromConnId
		messageModel.ToType, messageModel.ToUid = "", ""
	default:
		messageModel.FromUid, messageModel.FromConnId, messageModel.To, messageModel.ToType = requestModel.FromUid, requestModel.FromConnId, requestModel.To, requestModel.ToType
	}
	if messageModel.To[0:1] == "t" { //消息处理器，包含：群消息拆分，多设备拆分
		if uidSlice, ok := dao.GallUser.AllTag[messageModel.To]; ok { //TODO
			for _, uid := range uidSlice {
				messageModel.ToUid = uid
				connSlice, err := sys.GconnPool.GetConnSliceByTau(messageModel.ToUid, "u")
				if err == nil { //在线
					for _, conn := range connSlice {
						connId, _ := conn.GetConnId()
						messageModel.ToConnId = connId
						messageModel.Id, _ = gawMessager.saveMessage(*messageModel)
						gawMessager.messageHandle(*messageModel) //多设备发送
					}
					num = num + len(connSlice)
				} else { //离线
					go gawMessager.saveMessage(*messageModel)
					num = num + 1
				}
			}
		}
	} else if messageModel.To[0:1] == "a" || messageModel.To[0:1] == "u" {
		connSlice, err := sys.GconnPool.GetConnSliceByTau(messageModel.To, messageModel.To[0:1])
		if err == nil { //在线
			for _, conn := range connSlice {
				connId, _ := conn.GetConnId()
				if userInfo, err := conn.GetUser(); err == nil {
					messageModel.ToConnId, messageModel.ToUid = connId, "u/"+userInfo.Uid
					messageModel.Id, _ = gawMessager.saveMessage(*messageModel)
					gawMessager.messageHandle(*messageModel) //多设备异步发送
				}
			}
			num = len(connSlice)
		} else { //离线
			if messageModel.To[0:1] == "a" {
				if uid, ok := dao.GallUser.AllAlias[messageModel.To]; ok { //TODO
					messageModel.ToUid = uid
				} else {
					messageModel.ToUid = "" //无此用户
				}
			}
			if messageModel.To[0:1] == "u" {
				if uid, ok := dao.GallUser.AllUid[messageModel.To]; ok { //TODO
					messageModel.ToUid = uid
				} else {
					messageModel.ToUid = "" //无此用户
				}
			}
			if messageModel.ToUid != "" {
				gawMessager.saveMessage(*messageModel)
			}
			num += 1
		}
	} else if messageModel.To[0:1] == "c" {
		messageModel.Id, _ = gawMessager.saveMessage(*messageModel)
		gawMessager.messageHandle(*messageModel)
		num += 1
	}
	gawMessager.setNumber(num, requestModel.Id)
}

/**
 * 保存请求数据
 */
func (gawMessager *GawMessage) saveRequest(msg model.RequestModel) (int64, error) {
	requestDaoer := dao.NewRequestDao()
	return requestDaoer.SaveRequest(&msg)
}

/**
 * 修改请求数据
 */
func (gawMessager *GawMessage) updateRequestByMsg(msg model.MessageModel) (bool, error) {
	requestDaoer := dao.NewRequestDao()
	return requestDaoer.UpdateRequestByMsg(&msg)
}

func (gawMessager *GawMessage) setNumber(num int, id int64) (bool, error) {
	requestDaoer := dao.NewRequestDao()
	return requestDaoer.SetNumber(num, id)
}

/**
 * 保存消息消息
 */
func (gawMessager *GawMessage) saveMessage(msg model.MessageModel) (int64, error) {
	messageDaoer := dao.NewMessageDao()
	return messageDaoer.SaveMessage(&msg)
}

/**
 * 消息中间件
 */
func (gawMessager *GawMessage) messageHandle(msg model.MessageModel) {
	msg.Times += 1
	if _, ok := sys.GconnPool.ConnList[msg.ToConnId]; !ok && msg.ToUid != "" {
		gawMessager.saveMessage(msg)
	} else if sys.Gconfig.Get("sendqueue").Get("active").MustBool() { //启用消息队列
		if msg.Received == false && msg.Times <= sys.Gconfig.Get("sendqueue").Get("retries").MustInt() {
			if data, err := json.Marshal(msg); err == nil {
				sys.GsendQueue.Put([]byte(data), 0, 10*time.Second, 30*time.Second) //TODO.
			}
		}
	} else {
		if msg.Received == false && msg.Times <= sys.Gconfig.Get("sendqueue").Get("retries").MustInt() {
			gawMessager.message <- &msg
		}
	}
}

/**
 *
 * 发送消息
 */
func (gawMessager *GawMessage) SendMessage(msg *model.MessageModel) error {
	var err error
	switch msg.Cmd {
	case "login":
		_, err = gawMessager.loginHandle(msg)
	case "chat":
		_, err = gawMessager.chatHandle(msg)
	case "received":
		_, err = gawMessager.receivedHandle(msg)
	case "response":
		_, err = gawMessager.responseHandle(msg)
	default:
		err = errors.New("未知请求动作")
	}
	return err
}

/**
 * offline 重新推送
 */
func (gawMessager *GawMessage) offlineMessage(userInfo *model.UserModel, conn protocol.SocketProtocol) {
	messageDaoer := dao.NewMessageDao()
	if msgSlice, err := messageDaoer.OfflineMessage(userInfo); err == nil {
		for _, msg := range msgSlice {
			connId, _ := conn.GetConnId()
			msg.ToConnId = connId
			go gawMessager.messageHandle(msg)
		}
	}
}

/**
 * 登陆处理器
 */
func (gawMessager *GawMessage) loginHandle(msg *model.MessageModel) (int, error) {
	conn, ok := sys.GconnPool.ConnList[msg.ToConnId]
	if ok {
		if _, errs := conn.GetUser(); errs == nil {
			msg.Cmd, msg.Message["code"], msg.Message["title"], msg.Message["content"] = "response", "2001", sys.Glang.Get("tips").MustString(), sys.Gcode.Get("2001").MustString()
			text, _ := json.Marshal(msg)
			if err := conn.SendText([]byte(text)); err != nil {
				gawMessager.messageHandle(*msg)
				return -1, errors.New("发送失败")
			}
			return 1001, errors.New(msg.Message["content"])
		}
		if _, ok := msg.Message["username"]; ok != true {
			msg.Cmd, msg.Message["code"], msg.Message["title"], msg.Message["content"] = "response", "2002", sys.Glang.Get("tips").MustString(), sys.Gcode.Get("2002").MustString()
			text, _ := json.Marshal(msg)
			if err := conn.SendText([]byte(text)); err != nil {
				//同步方式，加入队列
				gawMessager.messageHandle(*msg)
				return -1, errors.New("发送失败")
			}
			return 1002, errors.New(msg.Message["content"])
		}
		if _, ok := msg.Message["password"]; ok != true {
			msg.Cmd, msg.Message["code"], msg.Message["title"], msg.Message["content"] = "response", "2003", sys.Glang.Get("tips").MustString(), sys.Gcode.Get("2003").MustString()
			text, _ := json.Marshal(msg)
			if err := conn.SendText([]byte(text)); err != nil {
				//同步方式，加入队列
				gawMessager.messageHandle(*msg)
				return -1, errors.New("发送失败")
			}
			return 1003, errors.New(msg.Message["content"])
		}
		userDaoer := dao.NewUserDao()
		if userInfo, err := userDaoer.Login(msg); err == nil { //登录成功
			conn.SetUser(userInfo)
			sys.GconnPool.AddTau(userInfo.Alias, conn, "a")
			sys.GconnPool.AddTau("u/"+string(userInfo.Uid), conn, "u")
			for _, tag := range userInfo.Tag {
				sys.GconnPool.AddTau(tag, conn, "t")
			}
			//接受离线消息
			gawMessager.offlineMessage(userInfo, conn)

			//发送欢迎信息
			msg.Cmd, msg.Message["code"], msg.Message["title"], msg.Message["content"] = "response", "2000", sys.Glang.Get("tips").MustString(), sys.Gcode.Get("2000").MustString()
			text, _ := json.Marshal(msg)
			if err := conn.SendText([]byte(text)); err != nil {
				gawMessager.messageHandle(*msg)
				return -1, errors.New("发送失败")
			}
			return 0, nil
		} else {
			msg.Cmd, msg.Message["code"], msg.Message["title"], msg.Message["content"] = "response", "2001", sys.Glang.Get("tips").MustString(), sys.Gcode.Get("2004").MustString()
			text, _ := json.Marshal(msg)
			if err := conn.SendText([]byte(text)); err != nil {
				gawMessager.messageHandle(*msg)
				return -1, errors.New("发送失败")
			}
		}
		return 1004, errors.New(msg.Message["content"])
	}
	return -2, errors.New("客户端连接已失效")
}

/**
 * 聊天处理器
 */
func (gawMessager *GawMessage) chatHandle(msg *model.MessageModel) (int, error) {
	if conn, ok := sys.GconnPool.ConnList[msg.ToConnId]; ok {
		text, _ := json.Marshal(msg)
		if err := conn.SendText([]byte(text)); err != nil {
			gawMessager.messageHandle(*msg)
			return -1, errors.New("发送失败")
		}
	} else {
		gawMessager.messageHandle(*msg)
		return -2, errors.New("客户端连接已失效")
	}
	return 0, nil
}

/**
 * 发送响应处理器
 */
func (gawMessager *GawMessage) responseHandle(msg *model.MessageModel) (int, error) {
	if conn, ok := sys.GconnPool.ConnList[msg.ToConnId]; ok {
		text, _ := json.Marshal(msg)
		conn.SendText([]byte(text))
	}
	if msg.Id > 0 {
		messageDaoer := dao.NewMessageDao()
		messageDaoer.Arrived(msg)
	}
	return 0, nil
}

/**
 * 响应处理器
 */
func (gawMessager *GawMessage) receivedHandle(msg *model.MessageModel) (int, error) {
	if msg.Id > 0 {
		messageDaoer := dao.NewMessageDao()
		messageModel, _ := messageDaoer.Arrived(msg)

		//发送成功请求到sender
		msg.Cmd, msg.To, msg.ToConnId = "response", messageModel.FromConnId, messageModel.FromConnId
		gawMessager.updateRequestByMsg(*msg)

		msg.Id, _ = gawMessager.saveMessage(*msg)
		gawMessager.messageHandle(*msg)
	}
	return 0, nil
}

/**
 * 消息发送常驻函数
 */
func (gawMessager *GawMessage) Run() {
	ticker := time.NewTicker(pingPeriod * time.Second)
	defer func() {
		ticker.Stop()
	}()
	for {
		select {
		case m := <-gawMessager.message:
			gawMessager.SendMessage(m)
		case <-ticker.C:
			//ping？
		}
	}
}
