package service

import (
	"encoding/json"
	//"fmt"
	"net/http"
	"os"
	"strings"
	"time"
	"zim/common"
	"zim/dao"
	"zim/sys"
)

type fileSvr struct {
}

var FileSvr *fileSvr

func NewFileSvr() *fileSvr {
	return &fileSvr{}
}

func (f *fileSvr) FileSvrHandle(w http.ResponseWriter, r *http.Request) (res string, code int) {
	switch r.FormValue("act") {
	case "upload":
		token := r.FormValue("token")
		c := NewConnectSvr()
		if re, islogin := LoginSvr.CheckLogin(token, "t"); re != "" && islogin {
			if err := json.Unmarshal([]byte(re), c); err != nil || c.User.Uid == "" {
				code = 2002
				return
			}
		} else {
			code = 2002
			return
		}
		appid := r.FormValue("appid")
		name := r.FormValue("name")
		sort := r.FormValue("sort")
		content := r.FormValue("content")
		//file upload
		dir := "upload/" + strings.Replace(time.Now().String()[:7], ":", "_", 3)
		if _, err := os.Stat(dir); err != nil {
			if err := os.Mkdir(dir, 0755); err != nil {
				code = 5004
				common.LogSvr.Fatal("fatal:" + sys.LangConf.Get("5004").MustString())
				return
			}
		}
		pre := common.RandomStr(32)
		sName := strings.Split(name, ".")
		filepath := dir + "/" + pre
		if len(sName) > 1 {
			sub := sName[len(sName)-1]
			filepath += "." + sub
		}
		fout, err := os.Create(filepath)
		defer fout.Close()
		if err != nil {
			code = 5003
			return
		}
		fout.WriteString(content)
		//file upload
		fileDao := dao.NewFileDao()
		if id, _ := fileDao.Save(name, sort, filepath, c.User.Uid, appid); id == 0 {
			code = 5003
			return
		}
		info, _ := json.Marshal(fileDao)
		res = string(info)
	case "get":
		token := r.FormValue("token")
		c := NewConnectSvr()
		if re, islogin := LoginSvr.CheckLogin(token, "t"); re != "" && islogin {
			if err := json.Unmarshal([]byte(re), c); err != nil || c.User.Uid == "" {
				code = 2002
				return
			}
		} else {
			code = 2002
			return
		}
		path := r.FormValue("path")
		fin, err := os.Open(path)
		if err != nil {
			code = 5005
			return
		}
		defer fin.Close()
		buf := make([]byte, 1024)
		for {
			n, _ := fin.Read(buf)
			if 0 == n {
				break
			}
			//TODO.
			res += string(buf[:n])
		}
	default:
		code = 4012
	}
	return
}
