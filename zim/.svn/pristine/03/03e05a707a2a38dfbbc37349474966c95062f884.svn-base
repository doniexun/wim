package main

import (
	//"fmt"
	"net/http"
	//"net/rpc"
	"text/template"
	"zim/common"
	"zim/service"
	"zim/sys"
)

func init() {
	common.LogSvr = common.GetLogger()                  //日志handle
	sys.BaseConf = sys.NewConfig("config/config.json")  //基础配置
	sys.LangConf = sys.NewConfig("config/lang_zh.json") //语言配置

	service.LoginSvr = service.NewLoginSvr()     //登陆handle
	service.RequestSrv = service.NewRequestSrv() //请求handle

	service.ConnectHub = service.NewConnectHub() //ws连接池
	sys.DbHub = sys.NewDbHub()                   //db连接池
	sys.RedisHub = sys.NewRedisHub()             //redis连接池
}

//step1
//GET /ls?act=login&appid=<>&username=<>&password=<> HTTP/1.1
//GET /ls?act=islogin&token=<> HTTP/1.1
func serverLoginSvr(w http.ResponseWriter, r *http.Request) {
	if host, code := service.LoginSvr.LoginSvrHandle(w, r); code == 0 {
		w.Write([]byte(host))
	} else {
		http.Error(w, sys.LangConf.Get(string(code)).MustString(), code)
	}
}

//step2
//GET /ns?token=12345678909876543210 ws/1
func serverNotificationSvr(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4005").MustString())
		http.Error(w, sys.LangConf.Get("4005").MustString(), 4005)
		return
	}
	if r.FormValue("token") == "" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4006").MustString())
		http.Error(w, sys.LangConf.Get("4006").MustString(), 4006)
		return
	}
	//checklogin
	if _, islogin := service.LoginSvr.CheckLogin(r.FormValue("token"), "t"); !islogin {
		common.LogSvr.Println("info:" + sys.LangConf.Get("2002").MustString())
		http.Error(w, sys.LangConf.Get("2002").MustString(), 2002)
		return
	}
	connectSvr := service.NewConnectSvr()
	code, err := connectSvr.Connect(w, r)
	if code == 0 {
		connectSvr.Reader()
	} else {
		common.LogSvr.Println("info: " + err.Error())
		http.Error(w, err.Error(), code)
		return
	}
}

//step3
//GET /ps?token=<>&query=<> HTTP/1.1
func serverPushSvr(w http.ResponseWriter, r *http.Request) {
	if r.Method != "GET" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4005").MustString())
		http.Error(w, sys.LangConf.Get("4005").MustString(), 4005)
		return
	}
	if r.FormValue("token") == "" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4006").MustString())
		http.Error(w, sys.LangConf.Get("4006").MustString(), 4006)
		return
	}
	ps := service.NewPushSvr()
	if host, code := ps.PushSvrHandle(w, r); code == 0 {
		w.Write([]byte(host))
	} else {
		http.Error(w, sys.LangConf.Get(string(code)).MustString(), code)
	}
}

//step4
func serverReceiveSvr(w http.ResponseWriter, r *http.Request) {
	if r.FormValue("token") == "" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4006").MustString())
		http.Error(w, sys.LangConf.Get("4006").MustString(), 4006)
		return
	}
	rs := service.NewReceiveSvr()
	if message, code := rs.ReceiveSvrHandle(w, r); code == 0 {
		w.Write([]byte(message))
	} else {
		http.Error(w, sys.LangConf.Get(string(code)).MustString(), code)
	}
}

//GET /fs?act=upload&token=<>&appid=<>&sort=<>&content=<>&name=<> HTTP/1.1
//GET /fs?act=get&token=<>&path=<upload/2015-05/462a8acb4322aab29356e7534c0543ca> HTTP/1.1
func serverFileSvr(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		common.LogSvr.Println("info:" + sys.LangConf.Get("4005").MustString())
		http.Error(w, sys.LangConf.Get("4005").MustString(), 4005)
		return
	}
	if host, code := service.FileSvr.FileSvrHandle(w, r); code == 0 {
		w.Write([]byte(host))
	} else {
		http.Error(w, sys.LangConf.Get(string(code)).MustString(), code)
	}
}

func serverWebChatSvr(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/wc" {
		common.LogSvr.Println("info: " + sys.LangConf.Get("4004").MustString())
		http.Error(w, sys.LangConf.Get("4004").MustString(), 4004)
		return
	}
	if r.Method != "GET" {
		common.LogSvr.Println("info: " + sys.LangConf.Get("4005").MustString())
		http.Error(w, sys.LangConf.Get("4005").MustString(), 4005)
		return
	}
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	tpl := make(map[string]*template.Template)
	tpl["home"] = template.Must(template.ParseFiles("template/webchat.html"))
	tpl["home"].Execute(w, r.Host)
}

func serverDispatchSvr(w http.ResponseWriter, r *http.Request) {

}

func serverSwitchboardSvr(w http.ResponseWriter, r *http.Request) {

}

func main() {
	go sys.DbHub.Run()
	go service.ConnectHub.Run()
	http.HandleFunc("/ls", serverLoginSvr)        //HTTP Login Server
	http.HandleFunc("/ns", serverNotificationSvr) //WS Notification Server
	http.HandleFunc("/ps", serverPushSvr)         //HTTP Push Server
	http.HandleFunc("/rs", serverReceiveSvr)      //HTTP+WebSocket WebChat Server
	http.HandleFunc("/fs", serverFileSvr)         //HTTP file Server

	http.HandleFunc("/wc", serverWebChatSvr) //HTTP+WebSocket WebChat Server

	http.HandleFunc("/ds", serverDispatchSvr)    //HTTP Dispatch Server
	http.HandleFunc("/sb", serverSwitchboardSvr) //WebSocket Switchboard Server

	mode := sys.BaseConf.Get("mode").MustString()
	addr := sys.BaseConf.Get(mode[:2]).Get(mode[2:]).Get("ip").MustString() + ":" + sys.BaseConf.Get(mode[:2]).Get(mode[2:]).Get("port").MustString()
	err := http.ListenAndServe(addr, nil)

	if err != nil {
		common.LogSvr.Fatal("fatal:ListenAndServe(" + err.Error() + ")")
	}
}
