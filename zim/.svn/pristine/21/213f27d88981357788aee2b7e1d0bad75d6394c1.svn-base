package dao

import (
	//"fmt"
	"strconv"
	"zim/sys"
)

type UserDao struct {
	baseDao
	Uid      string `json:"uid" db:"uid"`            //用户id
	Username string `json:"username"  db:"username"` //用户名
	Appid    int    `json:"appid"  db:"appid"`       //用户服务器
	Nickname string `json:"nickname"  db:"nickname"` //昵称
	Sex      string `json:"sex"  db:"sex"`           //性别
	SeqSvr   int64  `json:"seq_svr"  db:"seq_svr"`   //服务端分配序列
	SeqCli   int64  `json:"seq_cli"  db:"seq_cli"`   //客户端读取序列

	disabled int    `db:"disabled"` //是否禁用
	password string `db:"password"` //密码
	timeline int64  `db:"timeline"`

	Group map[string]GroupDao `json:"group" ` //该用户关联群
}

func NewUserDao(sessionid string) (u *UserDao) {
	u = &UserDao{}
	u.SetTableName("zim_user")
	u.SetSessionid(sessionid)
	return u
}

func (u *UserDao) Login(username, password, appid string) (err error) {
	sql := "SELECT `appid`,`uid`,`username`,`nickname`,`sex`,`seq_cli`,`seq_svr` FROM `" + u.GetTableName() + "` WHERE `disabled`=0 AND `username`='" + username + "' AND `password`='" + password + "' AND `appid`='" + appid + "'"
	dbmap, err := sys.DbHub.Database(u.sessionid, "master")
	if err != nil {
		return
	}
	urow, err := dbmap.Query(sql)
	if err == nil {
		urow.Next()
		err = urow.Scan(&u.Appid, &u.Uid, &u.Username, &u.Nickname, &u.Sex, &u.SeqCli, &u.SeqSvr)
		if u.Uid != "" {
			gd := NewGroupDao(u.sessionid)
			u.Group, _ = gd.Get(u.Uid)
		}
	}
	return
}

func (u *UserDao) GetGroup() map[string]GroupDao {
	return u.Group
}

func (u *UserDao) GetGroupUser(gid string) (gd []GuserDao, ok bool) {
	if _, ok = u.Group[gid]; ok {
		gd = u.Group[gid].Guser
	}
	return
}

func (u *UserDao) incrSeq(uid string, tp string) (seqSvr int64, seqCli int64, err error) {
	sql := "UPDATE `" + u.GetTableName() + "` SET `seq_cli`=`seq_cli`+1 WHERE `uid`='" + uid + "'"
	if tp == "s" {
		sql = "UPDATE `" + u.GetTableName() + "` SET `seq_svr`=`seq_svr`+1 WHERE `uid`='" + uid + "'"
	}
	dbmap, err := sys.DbHub.Database(u.sessionid, "master")
	if err != nil {
		return
	}
	stmt, _ := dbmap.Prepare(sql)
	defer stmt.Close()
	_, err = stmt.Exec()
	if err != nil {
		return
	}
	sql = "SELECT `seq_svr`,`seq_cli` FROM `" + u.GetTableName() + "` WHERE `uid`='" + uid + "'"
	urow, err := dbmap.Query(sql)
	if err != nil {
		return
	}
	urow.Next()
	urow.Scan(&seqSvr, &seqCli)
	return
}

func (u *UserDao) setSeq(seq int64, uid string, tp string) (seqSvr int64, seqCli int64, err error) {
	sql := "UPDATE `" + u.GetTableName() + "` SET `seq_cli`=" + strconv.FormatInt(seq, 10) + " WHERE `uid`='" + uid + "'"
	if tp == "s" {
		sql = "UPDATE `" + u.GetTableName() + "` SET `seq_svr`=" + strconv.FormatInt(seq, 10) + " WHERE `uid`='" + uid + "'"
	}
	dbmap, err := sys.DbHub.Database(u.sessionid, "master")
	if err != nil {
		return
	}
	stmt, _ := dbmap.Prepare(sql)
	defer stmt.Close()
	_, err = stmt.Exec()
	if err != nil {
		return
	}
	sql = "SELECT `seq_svr`,`seq_cli` FROM `" + u.GetTableName() + "` WHERE `uid`='" + uid + "'"
	urow, err := dbmap.Query(sql)
	if err != nil {
		return
	}
	urow.Next()
	urow.Scan(&seqSvr, &seqCli)
	u.SeqCli, u.SeqSvr = seqCli, seqSvr
	return
}

func (u *UserDao) haveMessage(uid string, seqCli int64) (r bool, err error) {
	sql := "SELECT `seq_cli`,`seq_svr` FROM " + u.GetTableName() + " WHERE `uid`='" + uid + "'"
	dbmap, err := sys.DbHub.Database(u.sessionid, "master")
	if err != nil {
		return
	}
	if urow, err := dbmap.Query(sql); err == nil {
		urow.Next()
		urow.Scan(&u.SeqCli, &u.SeqSvr)
		if u.SeqSvr > seqCli {
			r = true
		}
	}
	return
}
